@import "var";
@import "function";

// BEM
@mixin b($block) {
    $B: $namespace + "-" + $block !global;

    .#{$B} {
        @content;
    }
}

@mixin e($element) {
    $E: $element !global;
    $selector: &;
    $currentSelector: "";

    @each $unit in $element {
        $currentSelector: #{$currentSelector + "." + $B + $element-separator + $unit + ","};
    }

    @if hitAllSpecialNestRule($selector) {
        @at-root {
            #{$selector} {
                #{$currentSelector} {
                    @content;
                }
            }
        }
    } @else {
        @at-root {
            #{$currentSelector} {
                @content;
            }
        }
    }
}

@mixin m($modifier) {
    $selector: &;
    $currentSelector: "";

    @each $unit in $modifier {
        $currentSelector: #{$currentSelector + & + $modifier-separator + $unit + ","};
    }

    @at-root {
        #{$currentSelector} {
            @content;
        }
    }
}

// State
@mixin when($state) {
    @at-root {
        &.#{$state-prefix + $state} {
            @content;
        }
    }
}

// Util
@mixin utils-clearfix {
    $selector: &;

    @at-root {
        #{$selector}::before,
        #{$selector}::after {
            display: table;
            content: "";
        }

        #{$selector}::after {
            clear: both;
        }
    }
}

// Break-point
@mixin media-screen($key, $map: $--breakpoints) {
    $result: map-get($map, $key);

    @if $result {
        $condition: inspect($result);
        $condition: str-slice($condition, 2, -2);

        @media only screen and ($condition) {
            @content;
        }
    } @else {
        @warn "Undefeined points: `#{$map}`";
    }
}
